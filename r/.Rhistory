})
library(dplyr)
library(dbplyr)
library(lubridate)
# Helper para usar date_trunc en mutate()
date_trunc_minute <- function(x) {
dbplyr::sql_expr(DATE_TRUNC('minute', !!enquo(x)))
}
resumen <- tbl(con, src_name) %>%
mutate(
fecha = cast(fecha %as% TIMESTAMP),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast(current_timestamp() %as% TIMESTAMP) - dminutes(60)
) %>%
group_by(minuto, subarea) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
fecha = dbplyr::sql_expr(CAST(!!ensym(fecha) AS TIMESTAMP)),
library(dplyr)
library(dbplyr)
library(lubridate)
# Helper genérico para hacer CAST en SQL desde dplyr
cast_as <- function(x, type) {
dbplyr::sql_expr(CAST(!!enquo(x) AS !!dbplyr::sql(type)))
library(dplyr)
library(dbplyr)
library(lubridate)
# Helper genérico para CAST
cast_as <- function(x, type) {
dbplyr::sql_expr(CAST(!!enquo(x) AS !!dbplyr::sql(type)))
library(dplyr)
library(dbplyr)
library(lubridate)
# Helper genérico para CAST
cast_as <- function(x, type) {
dbplyr::build_sql("CAST(", dbplyr::sql_expr(!!enquo(x)), " AS ", dbplyr::sql(type), ")")
}
# Helper genérico para DATE_TRUNC
date_trunc_unit <- function(unit, x) {
dbplyr::build_sql("DATE_TRUNC(", dbplyr::sql(paste0("'", unit, "'")), ", ", dbplyr::sql_expr(!!enquo(x)), ")")
}
# Helper específico: truncar a minuto
date_trunc_minute <- function(x) {
date_trunc_unit("minute", {{ x }})
}
resumen <- tbl(con, src_name) %>%
mutate(
fecha  = cast_as(fecha, "TIMESTAMP"),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast_as(dbplyr::sql("CURRENT_TIMESTAMP"), "TIMESTAMP") - dminutes(60)
) %>%
group_by(minuto, subarea) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
fecha  = cast_as(fecha, "TIMESTAMP"),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast_as(dbplyr::sql("CURRENT_TIMESTAMP"), "TIMESTAMP") - dminutes(60)
) %>%
group_by(minuto) %>%  # quitamos subarea si no existe
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
library(dplyr)
library(dbplyr)
library(lubridate)
# Detectamos las columnas disponibles
cols <- colnames(tbl(con, src_name))
# Construimos la consulta dinámicamente
resumen_query <- tbl(con, src_name) %>%
mutate(
fecha  = cast_as(fecha, "TIMESTAMP"),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast_as(dbplyr::sql("CURRENT_TIMESTAMP"), "TIMESTAMP") - dminutes(60)
)
if ("subarea" %in% cols) {
resumen_query <- resumen_query %>%
group_by(minuto, subarea)
} else {
resumen_query <- resumen_query %>%
group_by(minuto)
}
resumen <- resumen_query %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
# Helper genérico para CAST
cast_as <- function(x, type) {
dbplyr::sql( paste0("CAST(", rlang::as_name(enquo(x)), " AS ", type, ")") )
}
# Helper genérico para DATE_TRUNC
date_trunc_unit <- function(unit, x) {
dbplyr::sql( paste0("DATE_TRUNC('", unit, "', ", rlang::as_name(enquo(x)), ")") )
}
# Helper específico: truncar a minuto
date_trunc_minute <- function(x) {
date_trunc_unit("minute", {{ x }})
}
resumen <- tbl(con, src_name) %>%
mutate(
fecha  = cast_as(fecha, "TIMESTAMP"),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast_as(dbplyr::sql("CURRENT_TIMESTAMP"), "TIMESTAMP") - dminutes(60)
) %>%
{
if ("subarea" %in% cols) group_by(., minuto, subarea) else group_by(., minuto)
} %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
# Helper CAST que devuelve SQL crudo
cast_as <- function(col, type) {
col_name <- dbplyr::as.sql(rlang::as_name(enquo(col)))
dbplyr::sql(paste0("CAST(", col_name, " AS ", type, ")"))
}
# Helper DATE_TRUNC genérico
date_trunc_unit <- function(unit, col) {
col_name <- dbplyr::as.sql(rlang::as_name(enquo(col)))
dbplyr::sql(paste0("DATE_TRUNC('", unit, "', ", col_name, ")"))
}
# Versión específica: minuto
date_trunc_minute <- function(col) {
date_trunc_unit("minute", {{ col }})
}
resumen_query <- tbl(con, src_name) %>%
mutate(
fecha  = cast_as(fecha, "TIMESTAMP"),
minuto = date_trunc_minute(fecha)
) %>%
filter(
fecha >= cast_as(dbplyr::sql("CURRENT_TIMESTAMP"), "TIMESTAMP") - dminutes(60)
)
# Agrupación condicional
if ("subarea" %in% cols) {
resumen_query <- resumen_query %>% group_by(minuto, subarea)
} else {
resumen_query <- resumen_query %>% group_by(minuto)
}
resumen <- resumen_query %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
show_query(resumen_query)
resumen_query <- tbl(con, src_name) %>%
mutate(
fecha  = dbplyr::sql("CAST(fecha AS TIMESTAMP)"),
minuto = dbplyr::sql("DATE_TRUNC('minute', CAST(fecha AS TIMESTAMP))")
) %>%
filter(
dbplyr::sql("CAST(fecha AS TIMESTAMP) >= CURRENT_TIMESTAMP - INTERVAL '60' MINUTE")
)
if ("subarea" %in% cols) {
resumen_query <- resumen_query %>% group_by(minuto, subarea)
} else {
resumen_query <- resumen_query %>% group_by(minuto)
}
resumen <- resumen_query %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
SELECT
cols_df$name
resumen <- dplyr::tbl(con, dplyr::sql(sprintf("
SELECT date_trunc('minute', %s) AS minuto,
id,
avg(intensidad) AS intensidad_media,
avg(ocupacion)  AS ocupacion_media
FROM %s
WHERE %s >= now() - INTERVAL 60 MINUTE
GROUP BY 1,2
ORDER BY 1 DESC
", time_col, src_name, time_col))) %>% collect()
library(dplyr)
library(dbplyr)
library(lubridate)
resumen <- tbl(con, src_name) %>%
mutate(
minuto = sql("DATE_TRUNC('minute', CAST(fecha AS TIMESTAMP))")
) %>%
filter(
sql("CAST(fecha AS TIMESTAMP) >= NOW() - INTERVAL 60 MINUTE")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
cols_df$name
library(dplyr)
library(dbplyr)
library(lubridate)
resumen <- tbl(con, src_name) %>%
mutate(
minuto = sql("DATE_TRUNC('minute', CAST(fecha AS TIMESTAMP))")
) %>%
filter(
sql("CAST(fecha AS TIMESTAMP) >= NOW() - INTERVAL 60 MINUTE")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
library(dbplyr)
library(dplyr)
library(lubridate)
# Extender el traductor de DuckDB
sql_translate_env.duckdb <- function(con) {
sql_variant(
base_scalar = sql_translation(.parent = dbplyr::base_scalar),
base_agg    = sql_translation(.parent = dbplyr::base_agg),
base_win    = sql_translation(.parent = dbplyr::base_win),
# Traducciones nuevas
lubridate = sql_variant(
sql_translation(.parent = dbplyr::base_scalar),
# floor_date(fecha, "minute") -> DATE_TRUNC('minute', fecha)
floor_date = function(x, unit) {
unit <- as.character(unit)
if (unit == "minute") {
sql_expr(DATE_TRUNC('minute', !!x))
} else {
stop("Solo implementado para 'minute'")
}
},
# now() -> CURRENT_TIMESTAMP
now = function() {
sql_expr(CURRENT_TIMESTAMP)
}
)
)
}
resumen <- tbl(con, src_name) %>%
mutate(
minuto = floor_date(fecha, "minute")
) %>%
filter(
fecha >= now() - minutes(60)
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
show_query(
tbl(con, src_name) %>%
mutate(minuto = floor_date(fecha, "minute")) %>%
filter(fecha >= now() - minutes(60))
)
sql_translate_env.duckdb <- function(con) {
sql_variant(
base_scalar = dbplyr::base_scalar,
base_agg    = dbplyr::base_agg,
base_win    = dbplyr::base_win,
lubridate = sql_variant(
dbplyr::base_scalar,
# floor_date(fecha, "minute") -> DATE_TRUNC('minute', fecha)
floor_date = function(x, unit) {
unit <- as.character(unit)
if (unit == "minute") {
sql_expr(DATE_TRUNC('minute', !!x))
} else {
stop("Solo implementado para 'minute'")
}
},
# now() -> CURRENT_TIMESTAMP
now = function() {
sql_expr(CURRENT_TIMESTAMP)
},
# minutes(60) -> INTERVAL 60 MINUTE
minutes = function(n) {
sql_expr(INTERVAL !!n MINUTE)
sql_translate_env.duckdb <- function(con) {
sql_variant(
base_scalar = dbplyr::base_scalar,
base_agg    = dbplyr::base_agg,
base_win    = dbplyr::base_win,
lubridate = sql_variant(
dbplyr::base_scalar,
# floor_date(fecha, "minute") -> DATE_TRUNC('minute', fecha)
floor_date = function(x, unit) {
unit <- as.character(unit)
if (unit == "minute") {
sql_expr(DATE_TRUNC('minute', !!x))
} else {
stop("Solo implementado para 'minute'")
}
},
# now() -> CURRENT_TIMESTAMP
now = function() {
sql_expr(CURRENT_TIMESTAMP)
},
# minutes(60) -> INTERVAL 60 MINUTE
minutes = function(n) {
dbplyr::sql(paste0("INTERVAL ", as.integer(n), " MINUTE"))
}
)
)
}
show_query(tbl(con, src_name) %>% filter(fecha >= now() - minutes(60)))
resumen <- tbl(con, src_name) %>%
mutate(
minuto = floor_date(fecha, "minute")
) %>%
filter(
fecha >= now() - minutes(60)
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
minuto = floor_date(fecha, "minute")
) %>%
filter(
fecha >= now() - minutes(60)
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql_expr(DATE_TRUNC('minute', fecha))
) %>%
filter(
fecha >= dbplyr::sql_expr(CURRENT_TIMESTAMP - INTERVAL 60 MINUTE)
resumen <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql_expr(DATE_TRUNC('minute', fecha))
) %>%
filter(
fecha >= dbplyr::sql("CURRENT_TIMESTAMP - INTERVAL 60 MINUTE")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
) %>%
filter(
fecha >= dbplyr::sql("CURRENT_TIMESTAMP - INTERVAL 60 MINUTE")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
) %>%
filter(
fecha >= dbplyr::sql("date_sub(CURRENT_TIMESTAMP, INTERVAL 60 MINUTE)")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
) %>%
filter(
fecha >= dbplyr::sql("date_add(CAST(CURRENT_TIMESTAMP AS TIMESTAMP), -INTERVAL 60 MINUTE)")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto)) %>%
collect()
resumen
library(dplyr)
library(dbplyr)
resumen_query <- tbl(con, src_name) %>%
mutate(
minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
) %>%
filter(
fecha >= dbplyr::sql("date_add(CAST(CURRENT_TIMESTAMP AS TIMESTAMP), -INTERVAL 60 MINUTE)")
) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto))
# Mostrar la query SQL
show_query(resumen_query)
# Ejecutar y traer los resultados
resumen <- collect(resumen_query)
print(resumen)
cols_df$name
resumen_query <- tbl(con, src_name) %>%
# mutate(
#     minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
# ) %>%
# filter(
#     fecha >= dbplyr::sql("date_add(CAST(CURRENT_TIMESTAMP AS TIMESTAMP), -INTERVAL 60 MINUTE)")
# ) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(minuto))
resumen_query <- tbl(con, src_name) %>%
# mutate(
#     minuto = dbplyr::sql("DATE_TRUNC('minute', fecha)")
# ) %>%
# filter(
#     fecha >= dbplyr::sql("date_add(CAST(CURRENT_TIMESTAMP AS TIMESTAMP), -INTERVAL 60 MINUTE)")
# ) %>%
group_by(minuto, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
)
resumen_query <- tbl(con, src_name) %>%
group_by(fecha, id) %>%
summarise(
intensidad_media = mean(intensidad, na.rm = TRUE),
ocupacion_media  = mean(ocupacion, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(fecha))
# Mostrar la SQL generada
show_query(resumen_query)
# Ejecutar y traer resultados
resumen <- collect(resumen_query)
print(resumen)
dbDisconnect(con)
gc()
